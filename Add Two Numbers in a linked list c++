/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        int val1 = 0, val2 = 0, carry = 0, sum = 0;
        ListNode* notnull;
        ListNode* dontknow;
        
        if(l1 == NULL && l2 == NULL){
            return NULL;
        }
        val1 = ((l1 == NULL) ? 0 : l1->val);
        val2 = ((l2 == NULL) ? 0 : l2->val);
        
        notnull = ((l1 == NULL) ? l2 : l1);
        dontknow = ((l1 == notnull) ? l2 : l1);
        
        notnull->val = val1+val2;
        notnull->next = addTwoNumbers(notnull->next, (dontknow == NULL ? NULL : dontknow->next));
        
        carry = floor(notnull->val / 10);
        notnull->val = notnull->val % 10;
        
        ListNode* checker = notnull;
        
        while(carry != 0 && checker->next != NULL){
            (checker->next->val) += carry;
            carry = floor((checker->next->val) / 10);
            (checker->next->val) = (checker->next->val) % 10;
            checker = checker->next;
        }
        
        if(checker->next == NULL && carry != 0){
            
            checker->next = new ListNode(carry);
            
        }
        //returning value
        return notnull;
    }
};
